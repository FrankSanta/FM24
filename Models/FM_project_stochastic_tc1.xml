<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>clock globalTime;
const int T_fr = 5;       // assistance time of a first responder
const int T_zr = 7;       // assistance time of a zero responder
const int T_v = 12;       // becoming-casualty time for victims
const int P_fail = 10;    // 100*p the probabilty the sensor of a drone fails
const int P_listen = 85;    // 100*p the probabilty a survivor listens to the commands of a drone

// Constants for the verification properties
const int Civilians_p_always_safe = 52; 
const int Surv_p_always_safe = 94;
const int Vict_p_always_safe = 51;
const int Civilians_p_sometimes_safe = 55; 
const int Surv_p_sometimes_safe = 85;
const int Vict_p_sometimes_safe = 54;
const int T_scs = T_v + 10;

// Entity type
const int SURVIVOR = 0;
const int VICTIM = 1;
const int FIRST_RESPONDER = 2;
const int DRONE = 3;

// Tile type in the map
const int FREE = 0;
const int FIRE = 1;
const int EXIT = 2;

typedef struct {
    int[-1,1] x;
    int[-1,1] y;
} pos_delta_t;
pos_delta_t shifts[4] = {{0,1},{0,-1},{1,0},{-1,0}};

/*#################### Declaration ####################
THIS PORTION IS AUTOGENERATED */

const int N = 10;   // map rows
const int M = 10;   // map columns
typedef int[0,N] coordx_t;
typedef int[0,M] coordy_t;

// Entity amounts
const int SURVIVORS_QTY = 3;
const int VICTIMS_QTY = 6;
const int FIRST_RESPONDERS_QTY = 3;
const int DRONES_QTY = 2;
int[0,6] entities[4] = {SURVIVORS_QTY, VICTIMS_QTY, FIRST_RESPONDERS_QTY, DRONES_QTY};

// IDs
typedef int[0,SURVIVORS_QTY-1] id_s_t;
typedef int[0,VICTIMS_QTY-1] id_v_t;
typedef int[0,FIRST_RESPONDERS_QTY-1] id_f_t;
typedef int[0,DRONES_QTY-1] id_d_t;

// Busy statuses
bool survivors_busy[SURVIVORS_QTY];
bool victims_busy[VICTIMS_QTY];
bool responders_busy[FIRST_RESPONDERS_QTY];

typedef struct {
    coordx_t x;
    coordy_t y;
} pos_t;
const pos_t pos_out_of_map = {N,M};

typedef struct {
    coordx_t min_x;
    coordy_t min_y;
    coordx_t max_x;
    coordy_t max_y;
} bounds_t;// Positions for survivors, victims and first responders
pos_t survivors[SURVIVORS_QTY] = {{2,0}, {8,3}, {2,6}};
pos_t victims[VICTIMS_QTY] = {{7,6}, {1,2}, {5,4}, {0,6}, {7,7}, {0,2}};
pos_t responders[FIRST_RESPONDERS_QTY] = {{6,2}, {4,8}, {3,4}};

// Positions and area bounds for drones
pos_t drones[DRONES_QTY] = {{2,2}, {2,7}};
bounds_t bounds[DRONES_QTY] = {{2 , 2, 7, 3}, {2 , 7, 7, 7}};
int drones_visibilities[DRONES_QTY] = {2,2};

int[0,2] map[N][M] = {
  {0,0,0,1,1,1,0,0,0,0},
  {0,0,0,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0},
  {2,0,0,0,0,1,1,1,0,2},
  {2,0,0,0,0,0,1,1,0,2},
  {0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,1},
  {0,0,0,0,0,0,0,0,1,1}
};

//#################################################################

// Channels
broadcast chan rescue[SURVIVORS_QTY], callFirstResponder[SURVIVORS_QTY], waitForSurvivor[FIRST_RESPONDERS_QTY], goToVictim[FIRST_RESPONDERS_QTY], helping[VICTIMS_QTY], save[VICTIMS_QTY];
id_v_t survToFRVictim[FIRST_RESPONDERS_QTY];

int[0,SURVIVORS_QTY] n_helping_civilians = 0;

// Manhattan distance since motion is on the 4 cardinal directions
int distance(pos_t pos1, pos_t pos2){
    int dist_x = pos1.x-pos2.x;
    int dist_y = pos1.y-pos2.y;

    if (pos1.x == pos_out_of_map.x || pos1.y == pos_out_of_map.y || pos2.x == pos_out_of_map.x || pos2.y == pos_out_of_map.y) {
        return INT16_MAX;
    }

    if(dist_x &lt; 0){
        dist_x = -dist_x;
    }
    if(dist_y &lt; 0){
        dist_y = -dist_y;
    }
    return dist_x+dist_y;
}

// Returns the ID of the closest entity
int utilGetClosest(int type, pos_t pos) {
    int closest = INT16_MAX;
    int closestDist = INT16_MAX;
    int temp;
    int k;
    int l;
    if (type==SURVIVOR) {
        for(k=0; k&lt;entities[type]; k++) {
            temp = distance(pos, survivors[k]);
            if(temp &lt; closestDist &amp;&amp; !survivors_busy[k]){
                closest = k;
                closestDist = temp;      
            }
        }
    }
    if (type==VICTIM) {
        for(k=0; k&lt;entities[type]; k++) {
            temp = distance(pos, victims[k]);
            if(temp &lt; closestDist &amp;&amp; !victims_busy[k]){
                closest = k;
                closestDist = temp;      
            }
        }
    }
    if (type==FIRST_RESPONDER) {
        for(k=0; k&lt;entities[type]; k++) {
            temp = distance(pos, responders[k]);
            if(temp &lt; closestDist &amp;&amp; !responders_busy[k]){
                closest = k;
                closestDist = temp;      
            }
        }
    }
    if (type==DRONE) {
        for(k=0; k&lt;entities[type]; k++) {
            temp = distance(pos, drones[k]);
            if(temp &lt; closestDist){
                closest = k;
                closestDist = temp;      
            }
        }
    }
    return closest;
}

// Returns the pos_t of the closest entity
pos_t utilGetClosestPos(int type, pos_t pos) {
    int closestId = utilGetClosest(type, pos);
    if (closestId == INT16_MAX) {
        return pos_out_of_map;
    }
    
    if (type==SURVIVOR) {
        return survivors[closestId];
    }
    if (type==VICTIM) {
        return victims[closestId];
    }
    if (type==FIRST_RESPONDER) {
        return responders[closestId];
    }
    return drones[closestId];
}

bool isOccupied(pos_t p) {
    int i;
    for (i = 0; i &lt; SURVIVORS_QTY; i++) {
        if (survivors[i].x == p.x &amp;&amp; survivors[i].y == p.y) {
            return true;
        }
    }
    for (i = 0; i &lt; FIRST_RESPONDERS_QTY; i++) {
        if (responders[i].x == p.x &amp;&amp; responders[i].y == p.y) {
            return true;
        }
    }
    for (i = 0; i &lt; VICTIMS_QTY; i++) {
        if (victims[i].x == p.x &amp;&amp; victims[i].y == p.y) {
            return true;
        }
    }
    return false;
}

bool tileIsNearSomething(pos_t p, int type) {
    if (p.x-1 &gt; 0 &amp;&amp; map[p.x-1][p.y] == type) {
        return true;
    }
    if (p.x+1 &lt; N &amp;&amp; map[p.x+1][p.y] == type) {
        return true;
    }
    if (p.y-1 &gt; 0 &amp;&amp; map[p.x][p.y-1] == type) {
        return true;
    }
    if (p.y+1 &lt; M &amp;&amp; map[p.x][p.y+1] == type) {
        return true;
    }
    return false;
}

bool tileIsNearVictim(pos_t p) {
    int[0,VICTIMS_QTY] k;
    for(k=0; k&lt;VICTIMS_QTY; k++) {
        if (victims[k].x == p.x &amp;&amp; p.y&lt;M &amp;&amp; victims[k].y == p.y+1) {
            return true;
        }
        if (victims[k].x == p.x &amp;&amp; p.y&gt;0 &amp;&amp; victims[k].y == p.y-1) {
            return true;
        }
        if (victims[k].y == p.y &amp;&amp; p.x&lt;N &amp;&amp; victims[k].x == p.x+1) {
            return true;
        }
        if (victims[k].y == p.y &amp;&amp; p.x&gt;0 &amp;&amp; victims[k].x == p.x-1) {
            return true;
        }
    }
    return false;
}

bool positionInvalid(int[-1,N+1] x, int[-1,M+1] y) {
    return x &lt; 0 || y &lt; 0 || x &gt;= N || y &gt;= M;
}</declaration>
	<template>
		<name x="5" y="5">Responder</name>
		<parameter>const id_f_t id</parameter>
		<declaration>// Place local declarations here.
clock t_resp;
id_v_t victim;
pos_t victimPos;

bool can_go_to(pos_t pos){
    return  !isOccupied(pos) &amp;&amp; map[pos.x][pos.y] != FIRE;
}

// Returns the ID of the closest entity, using the util function
int getClosest(int type) {
    return utilGetClosest(type, responders[id]);
}

// Returns the pos_t of the closest entity, using the util function
pos_t getClosestPos(int type) {
    return utilGetClosestPos(type, responders[id]);
}

void move() {    
    pos_t oldPos = responders[id];
    pos_t newPos;
    pos_delta_t posDelta;
    int k;
    pos_t temp_x;
    pos_t temp_y;
    pos_t closest_victim = getClosestPos(VICTIM);
    
    posDelta.x = 0;
    posDelta.y = 0;
    t_resp = 0;
    
    if(closest_victim == pos_out_of_map){ // all victims are safe
        return;
    }
    // get delta x
    if(oldPos.x &lt; closest_victim.x){
        posDelta.x = 1;
    }
    else if(oldPos.x &gt; closest_victim.x){
        posDelta.x = -1;
    }
    
    // get delta y
    if(oldPos.y &lt; closest_victim.y){
        posDelta.y = 1;
    }
    else if(oldPos.y &gt; closest_victim.y){
        posDelta.y = -1;
    }
    
    // get closer to the exit
    newPos = oldPos;
    temp_x.x = oldPos.x + posDelta.x;
    temp_x.y = oldPos.y;
    temp_y.x = oldPos.x;
    temp_y.y = oldPos.y + posDelta.y;
    if(posDelta.x != 0 &amp;&amp; can_go_to(temp_x)){ // get closer on x if possible
        newPos = temp_x;
    }
    else if(posDelta.y != 0 &amp;&amp; can_go_to(temp_y)){ // get closer on y if possible
        newPos = temp_y;
    }
    else { // try all directions
        for(k=0; k&lt;4; k++) {
            posDelta = shifts[k];
            if (!positionInvalid(oldPos.x+posDelta.x, oldPos.y+posDelta.y)) {
                newPos.x = oldPos.x + posDelta.x;
                newPos.y = oldPos.y + posDelta.y;
            }
            if (can_go_to(newPos)) { 
                k=4;
            }
        }
    }
    if (can_go_to(newPos)) { 
        responders[id] = newPos;
    }
    return;
}

void helpBeginningFar() {
    responders_busy[id] = true;
    victim = survToFRVictim[id];
    victimPos = victims[victim];
    t_resp = 0;
}
void helpBeginningNear() {
    responders_busy[id] = true;
    victim = getClosest(VICTIM);
    victimPos = victims[victim];
    t_resp = 0;
}

void doneHelping(){
    responders[id] = victimPos;
    t_resp = 0;
    responders_busy[id] = false;
}

</declaration>
		<location id="id0" x="-1105" y="-552">
			<name x="-1088" y="-552">Deciding</name>
			<committed/>
		</location>
		<location id="id1" x="-773" y="-841">
			<name x="-748" y="-867">Helping</name>
			<label kind="invariant" x="-748" y="-850">t_resp &lt;= T_fr</label>
		</location>
		<location id="id2" x="-773" y="-331">
			<name x="-807" y="-306">Reaching</name>
			<label kind="invariant" x="-986" y="-374">t_resp &lt;= distance(responders[id], victimPos)</label>
		</location>
		<location id="id3" x="-1513" y="-552">
			<name x="-1581" y="-569">Moving</name>
			<label kind="invariant" x="-1624" y="-552">t_resp &lt;= 1</label>
		</location>
		<location id="id4" x="-1105" y="-331">
			<name x="-1181" y="-306">Waiting_for_survivor</name>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-1096" y="-467">waitForSurvivor[id]?</label>
			<label kind="assignment" x="-1088" y="-442">helpBeginningFar()</label>
		</transition>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1003" y="-323">goToVictim[id]?</label>
			<label kind="assignment" x="-986" y="-297">t_resp = 0</label>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-1428" y="-382">waitForSurvivor[id]?</label>
			<label kind="assignment" x="-1419" y="-357">helpBeginningFar()</label>
			<nail x="-1513" y="-331"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1530" y="-841">distance(responders[id], getClosestPos(VICTIM)) &lt;= 1</label>
			<label kind="synchronisation" x="-1343" y="-790">helping[getClosest(VICTIM)]!</label>
			<label kind="assignment" x="-1283" y="-816">helpBeginningNear()</label>
			<nail x="-1105" y="-841"/>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-1496" y="-603">distance(responders[id], getClosestPos(VICTIM)) &gt; 1</label>
			<label kind="assignment" x="-1360" y="-578">t_resp = 0</label>
		</transition>
		<transition id="id10">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-986" y="-629">t_resp &gt;= distance(responders[id], victimPos)</label>
			<label kind="assignment" x="-765" y="-603">t_resp = 0</label>
		</transition>
		<transition id="id11">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-1292" y="-518">t_resp &gt;= 1</label>
			<label kind="assignment" x="-1275" y="-493">move()</label>
			<nail x="-1326" y="-518"/>
		</transition>
		<transition id="id12">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-1037" y="-739">t_resp &gt;= T_fr</label>
			<label kind="synchronisation" x="-1045" y="-688">save[victim]!</label>
			<label kind="assignment" x="-1045" y="-714">doneHelping()</label>
		</transition>
	</template>
	<template>
		<name>Victim</name>
		<parameter>const id_v_t id</parameter>
		<declaration>void exitMap() {
    victims[id] = pos_out_of_map;
}

void setBusy() {
    victims_busy[id] = true;
}</declaration>
		<location id="id13" x="-586" y="-8">
			<name x="-611" y="-42">In_need</name>
			<label kind="invariant" x="-645" y="-68">globalTime &lt;= T_v</label>
		</location>
		<location id="id14" x="68" y="-8">
			<name x="58" y="-42">Safe</name>
		</location>
		<location id="id15" x="-246" y="-8">
			<name x="-289" y="-42">Being_helped</name>
		</location>
		<location id="id16" x="-246" y="93">
			<name x="-221" y="85">Casualty</name>
		</location>
		<init ref="id13"/>
		<transition id="id17">
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="guard" x="-510" y="51">globalTime &gt;= T_v</label>
			<label kind="assignment" x="-484" y="76">setBusy()</label>
		</transition>
		<transition id="id18">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-229" y="25">globalTime &gt; T_v</label>
			<label kind="synchronisation" x="-229" y="51">save[id]?</label>
		</transition>
		<transition id="id19">
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="-476" y="-85">globalTime &lt;= T_v</label>
			<label kind="synchronisation" x="-459" y="-34">helping[id]?</label>
			<label kind="assignment" x="-450" y="-59">setBusy()</label>
		</transition>
		<transition id="id20">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-144" y="-85">globalTime &lt;= T_v</label>
			<label kind="synchronisation" x="-119" y="-34">save[id]?</label>
			<label kind="assignment" x="-119" y="-59">exitMap()</label>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>const id_d_t id</parameter>
		<declaration>// Place local declarations here.

clock t; 
pos_delta_t dir = {-1, -1};
int[0,5] Nv = 0;

bool hit_x_bound(){
    coordx_t min_x = bounds[id].min_x;
    coordx_t max_x = bounds[id].max_x;
    return (drones[id].x + dir.x &lt; min_x) || (drones[id].x + dir.x &gt; max_x);
}

bool hit_y_bound(){
    coordy_t min_y = bounds[id].min_y;
    coordy_t max_y = bounds[id].max_y;
    return (drones[id].y + dir.y &lt; min_y) || (drones[id].y + dir.y &gt; max_y);
}

bool on_track(){
    coordy_t min_y = bounds[id].min_y;
    return (drones[id].y - min_y) % (2 * Nv + 1) == 0;
}

void patrol() {
    coordx_t min_x = bounds[id].min_x;
    coordx_t max_x = bounds[id].max_x;
    coordy_t min_y = bounds[id].min_y;
    coordy_t max_y = bounds[id].max_y;

    Nv = drones_visibilities[id];
    if (hit_x_bound() &amp;&amp; hit_y_bound()){ //hit both bounds ==&gt; flip directions and restart
        dir.x = -dir.x;
        dir.y = -dir.y;
        if(!hit_x_bound()) {//if can move x do it
            drones[id].x += dir.x;
        }
        else if(!hit_y_bound()) { //if can move y do it
            drones[id].y += dir.y;
        }
        //else stand still
    }
    else if (!hit_x_bound()) { //if in bound move along x
        drones[id].x += dir.x;
    }
    else { // cannot move further x and not hit y bound =&gt; move y until new track or end
        drones[id].y += dir.y;
        if (on_track() &amp;&amp; !hit_y_bound()) { //on the last y-move flip x direction
            dir.x = -dir.x;
        }
    }
}

// Returns the ID of the closest entity, using the util function
int getClosest(int type) {
    return utilGetClosest(type, drones[id]);
}

// Returns the pos_t of the closest entity, using the util function
pos_t getClosestPos(int type) {
    return utilGetClosestPos(type, drones[id]);
}

bool survivorNear() {
    if ( distance(drones[id], getClosestPos(SURVIVOR)) &gt; Nv || distance(drones[id], getClosestPos(VICTIM)) &gt; Nv ) {
        return false;
    }
    return true;
}

bool survivorWillHelp() {
    if ( distance(getClosestPos(SURVIVOR), getClosestPos(VICTIM)) &lt; distance(getClosestPos(SURVIVOR), getClosestPos(FIRST_RESPONDER)) + distance(getClosestPos(FIRST_RESPONDER), getClosestPos(VICTIM)) )
        return true;
    return false;
}
</declaration>
		<location id="id21" x="-374" y="-34">
			<name x="-408" y="-76">Deciding</name>
			<committed/>
		</location>
		<location id="id22" x="-59" y="-34">
			<name x="-51" y="-68">Moving</name>
			<label kind="invariant" x="-51" y="-93">t&lt;=1</label>
		</location>
		<location id="id23" x="-59" y="314">
			<name x="-110" y="348">Communicating</name>
			<committed/>
		</location>
		<branchpoint id="id24" x="-374" y="314"/>
		<init ref="id21"/>
		<transition id="id25">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="probability" x="-442" y="195">P_fail</label>
			<nail x="-450" y="314"/>
			<nail x="-450" y="-161"/>
			<nail x="-59" y="-161"/>
		</transition>
		<transition id="id26">
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="probability" x="-263" y="331">100-P_fail</label>
		</transition>
		<transition id="id27">
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-51" y="8">survivorWillHelp()</label>
			<label kind="synchronisation" x="-51" y="42">rescue[getClosest(SURVIVOR)]!</label>
		</transition>
		<transition id="id28">
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="170" y="170">!survivorWillHelp()</label>
			<label kind="synchronisation" x="0" y="204">callFirstResponder[getClosest(SURVIVOR)]!</label>
			<nail x="331" y="314"/>
			<nail x="331" y="-34"/>
		</transition>
		<transition id="id29">
			<source ref="id21"/>
			<target ref="id24"/>
			<label kind="guard" x="-365" y="127">survivorNear()</label>
		</transition>
		<transition id="id30">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="-238" y="8">t&gt;=1</label>
			<label kind="assignment" x="-238" y="34">t=0</label>
			<nail x="-221" y="0"/>
		</transition>
		<transition id="id31">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-272" y="-110">!survivorNear()</label>
			<label kind="assignment" x="-246" y="-85">patrol()</label>
			<nail x="-221" y="-59"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Survivor</name>
		<parameter>const id_s_t id</parameter>
		<declaration>// Place local declarations here.
clock t;
id_v_t victim;
id_f_t responder;
pos_t victimPos;
pos_t responderPos;

bool can_go_to(pos_t pos){
    return  !isOccupied(pos) &amp;&amp; !tileIsNearSomething(pos, FIRE) &amp;&amp; map[pos.x][pos.y] != FIRE;
}

pos_t get_closest_exit(pos_t pos){
    coordx_t i;
    coordy_t j;
    int closestDist = INT16_MAX;
    pos_t closest_exit;
    pos_t temp;
    
    for(i=0; i &lt; N; i++){
       for(j = 0; j &lt; M; j++){
            temp.x = i;
            temp.y = j;
            if(map[i][j] == EXIT &amp;&amp; distance(pos, temp) &lt; closestDist){
                closest_exit = temp;
            }
        }
    }
    return closest_exit;
}

void move() {    
    pos_t oldPos = survivors[id];
    pos_t newPos;
    pos_delta_t posDelta;
    int k;
    pos_t temp_x;
    pos_t temp_y;
    pos_t closest_exit = get_closest_exit(oldPos);

    posDelta.x = 0;
    posDelta.y = 0;
    t = 0;
    
    // get delta x
    if(oldPos.x &lt; closest_exit.x){
        posDelta.x = 1;
    }
    else if(oldPos.x &gt; closest_exit.x){
        posDelta.x = -1;
    }
    
    // get delta y
    if(oldPos.y &lt; closest_exit.y){
        posDelta.y = 1;
    }
    else if(oldPos.y &gt; closest_exit.y){
        posDelta.y = -1;
    }
    
    // get closer to the exit
    newPos = oldPos;
    temp_x.x = oldPos.x + posDelta.x;
    temp_x.y = oldPos.y;
    temp_y.x = oldPos.x;
    temp_y.y = oldPos.y + posDelta.y;
    if(posDelta.x != 0 &amp;&amp; can_go_to(temp_x)){ // get closer on x if possible
        newPos = temp_x;
    }
    else if(posDelta.y != 0 &amp;&amp; can_go_to(temp_y)){ // get closer on y if possible
        newPos = temp_y;
    }
    else { // try all directions
        for(k=0; k&lt;4; k++) {
            posDelta = shifts[k];
            if (!positionInvalid(oldPos.x+posDelta.x, oldPos.y+posDelta.y)) {
                newPos.x = oldPos.x + posDelta.x;
                newPos.y = oldPos.y + posDelta.y;
            }
            if (can_go_to(newPos)) { 
                k=4;
            }
        }
    }
    if (can_go_to(newPos)) {
        survivors[id] = newPos;
    }
    return;
}

// Returns the ID of the closest entity, using the util function
int getClosest(int type) {
    return utilGetClosest(type, survivors[id]);
}

// Returns the pos_t of the closest entity, using the util function
pos_t getClosestPos(int type) {
    return utilGetClosestPos(type, survivors[id]);
}

bool nearExit() {
    pos_t pos = survivors[id];
    return tileIsNearSomething(pos, EXIT);
}

void doneReachingFR() {
    survivors[id] = responderPos;
    t = 0;
}
void doneReachingVictim() {
    survivors[id]=victimPos;
    t = 0;
}
void doneReachingAlone() {
    survivors[id]=victimPos;
    t = 0;
}
void exitMap() {
    survivors[id] = pos_out_of_map;
}

void exitMapAfterHelp(){
    n_helping_civilians++;
    exitMap();
}

void helpBeginning() {
    survivors_busy[id] = true;
    victim = getClosest(VICTIM);
    victimPos = victims[victim];
}

void helpBeginningWithFR(){
    helpBeginning();
    responder = getClosest(FIRST_RESPONDER);
    responderPos = responders[responder];
    survToFRVictim[responder] = victim;
}</declaration>
		<location id="id32" x="-162" y="442">
			<name x="-195" y="399">Deciding</name>
			<committed/>
		</location>
		<location id="id33" x="408" y="442">
			<name x="433" y="434">Moving</name>
			<label kind="invariant" x="441" y="459">t&lt;=1</label>
		</location>
		<location id="id34" x="977" y="119">
			<name x="960" y="144">Safe</name>
		</location>
		<location id="id35" x="646" y="119">
			<name x="620" y="85">Helping</name>
			<label kind="invariant" x="612" y="59">t &lt;= T_zr</label>
		</location>
		<location id="id36" x="170" y="119">
			<name x="109" y="85">Reaching_alone</name>
			<label kind="invariant" x="25" y="59">t &lt;= distance(survivors[id], victimPos)</label>
		</location>
		<location id="id37" x="-170" y="-76">
			<name x="-212" y="-110">Reaching_FR</name>
			<label kind="invariant" x="-212" y="-136">t &lt;= distance(survivors[id], responderPos)</label>
		</location>
		<location id="id38" x="977" y="-76">
			<name x="918" y="-110">Helping_with_FR</name>
			<label kind="invariant" x="943" y="-136">t &lt;= T_fr</label>
		</location>
		<location id="id39" x="408" y="-76">
			<name x="349" y="-110">Reaching_victim</name>
			<label kind="invariant" x="246" y="-136">t &lt;= distance(survivors[id], victimPos)</label>
		</location>
		<location id="id40" x="297" y="229">
			<committed/>
		</location>
		<location id="id41" x="-170" y="136">
			<committed/>
		</location>
		<location id="id42" x="374" y="331">
			<committed/>
		</location>
		<location id="id43" x="-51" y="238">
			<committed/>
		</location>
		<location id="id44" x="-170" y="17">
			<committed/>
		</location>
		<branchpoint id="id45" x="-170" y="238"/>
		<branchpoint id="id46" x="297" y="297"/>
		<init ref="id33"/>
		<transition id="id47">
			<source ref="id41"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-161" y="85">waitForSurvivor[responder]!</label>
		</transition>
		<transition id="id48">
			<source ref="id45"/>
			<target ref="id33"/>
			<label kind="probability" x="-161" y="272">100-P_listen</label>
			<nail x="-76" y="289"/>
		</transition>
		<transition id="id49">
			<source ref="id45"/>
			<target ref="id41"/>
			<label kind="assignment" x="-161" y="170">helpBeginningWithFR()</label>
			<label kind="probability" x="-161" y="195">P_listen</label>
		</transition>
		<transition id="id50">
			<source ref="id43"/>
			<target ref="id45"/>
		</transition>
		<transition id="id51">
			<source ref="id42"/>
			<target ref="id46"/>
		</transition>
		<transition id="id52">
			<source ref="id46"/>
			<target ref="id33"/>
			<label kind="probability" x="263" y="348">100-P_listen</label>
			<nail x="357" y="382"/>
		</transition>
		<transition id="id53">
			<source ref="id46"/>
			<target ref="id40"/>
			<label kind="assignment" x="323" y="272">helpBeginning()</label>
			<label kind="probability" x="323" y="246">P_listen</label>
		</transition>
		<transition id="id54">
			<source ref="id44"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-161" y="-34">helping[victim]!</label>
			<label kind="assignment" x="-161" y="-8">t = 0</label>
		</transition>
		<transition id="id55">
			<source ref="id40"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="119" y="187">helping[victim]!</label>
			<label kind="assignment" x="195" y="212">t=0</label>
		</transition>
		<transition id="id56">
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="guard" x="535" y="-68">t &gt;= distance(survivors[id], victimPos)</label>
			<label kind="assignment" x="612" y="-42">doneReachingVictim()</label>
		</transition>
		<transition id="id57">
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="guard" x="-59" y="-68">t &gt;= distance(survivors[id], responderPos)</label>
			<label kind="synchronisation" x="17" y="-17">goToVictim[responder]!</label>
			<label kind="assignment" x="42" y="-42">doneReachingFR()</label>
			<nail x="391" y="-76"/>
		</transition>
		<transition id="id58">
			<source ref="id38"/>
			<target ref="id34"/>
			<label kind="guard" x="960" y="0">t &gt;= T_fr</label>
			<label kind="assignment" x="901" y="25">exitMapAfterHelp()</label>
		</transition>
		<transition id="id59">
			<source ref="id33"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="17" y="289">callFirstResponder[id]?</label>
		</transition>
		<transition id="id60">
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="246" y="136">t &gt;= distance(survivors[id], victimPos)</label>
			<label kind="assignment" x="323" y="161">doneReachingAlone()</label>
		</transition>
		<transition id="id61">
			<source ref="id33"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="391" y="348">rescue[id]?</label>
		</transition>
		<transition id="id62">
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="756" y="127">t &gt;= T_zr</label>
			<label kind="synchronisation" x="739" y="178">save[victim]!</label>
			<label kind="assignment" x="731" y="153">exitMapAfterHelp()</label>
		</transition>
		<transition id="id63">
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="guard" x="25" y="450">t&gt;=1 &amp;&amp; !nearExit()</label>
			<label kind="assignment" x="93" y="476">t=0</label>
		</transition>
		<transition id="id64">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="671" y="289">nearExit()</label>
			<label kind="assignment" x="671" y="314">exitMap()</label>
		</transition>
		<transition id="id65">
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="assignment" x="85" y="382">move()</label>
			<nail x="110" y="408"/>
		</transition>
	</template>
	<system>// System definition
system Drone, Responder, Survivor, Victim;</system>
	<queries>
		<query>
			<formula>Pr[&lt;= T_scs] (&lt;&gt; ((sum(v : id_v_t) Victim(v).Safe) + (sum(v : id_s_t) Survivor(v).Safe)) &gt;= ((VICTIMS_QTY + SURVIVORS_QTY) * Civilians_p_always_safe/100) and globalTime &lt;= T_scs)</formula>
			<comment>A percentage Civilians_p_always_safe of all civilians is always guaranteed to reach a safe state within T_scs</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:13:01 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.555556)" color="0x0000ff" encoding="csv">8.0,0.65
8.555555555555555,0.45
9.11111111111111,0.0
9.666666666666666,0.0
10.222222222222221,0.0
10.777777777777779,0.125
11.333333333333334,0.0
11.88888888888889,0.55
12.444444444444445,0.0
13.0,0.025
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,0.6499999999999999
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.555556)" color="0xa0a0ff" encoding="csv">8.0,0.4828713519029786
8.555555555555555,0.3660280721379009
9.11111111111111,0.04994408370585468
9.666666666666666,0.04994408370585468
10.222222222222221,0.04994408370585468
10.777777777777779,0.15466731481612306
11.333333333333334,0.04994408370585468
11.88888888888889,0.4253166533144754
12.444444444444445,0.04994408370585468
13.0,0.07497131085391912
					</series>
					<series title="lower limit" type="b(0.555556)" color="0x0000ff" encoding="csv">8.0,0.2511628517785613
8.555555555555555,0.15539265735437505
9.11111111111111,0.0
9.666666666666666,0.0
10.222222222222221,0.0
10.777777777777779,0.022931659153745478
11.333333333333334,0.0
11.88888888888889,0.20237986943006747
12.444444444444445,0.0
13.0,3.515744052335976E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,0.8691684334253614
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.555556)" color="0x0000ff" encoding="csv">8.0,0.3611111111111111
8.555555555555555,0.25
9.11111111111111,0.0
9.666666666666666,0.0
10.222222222222221,0.0
10.777777777777779,0.06944444444444445
11.333333333333334,0.0
11.88888888888889,0.3055555555555556
12.444444444444445,0.0
13.0,0.013888888888888888
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,0.3611111111111111
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.555556)" color="0xa0a0ff" encoding="csv">8.0,0.4828713519029786
8.555555555555555,0.3660280721379009
9.11111111111111,0.04994408370585468
9.666666666666666,0.04994408370585468
10.222222222222221,0.04994408370585468
10.777777777777779,0.15466731481612306
11.333333333333334,0.04994408370585468
11.88888888888889,0.4253166533144754
12.444444444444445,0.04994408370585468
13.0,0.07497131085391912
					</series>
					<series title="lower limit" type="b(0.555556)" color="0x0000ff" encoding="csv">8.0,0.2511628517785613
8.555555555555555,0.15539265735437505
9.11111111111111,0.0
9.666666666666666,0.0
10.222222222222221,0.0
10.777777777777779,0.022931659153745478
11.333333333333334,0.0
11.88888888888889,0.20237986943006747
12.444444444444445,0.0
13.0,3.515744052335976E-4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,0.4828713519029786
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">8.0,0.0
8.555555555555555,0.3611111111111111
9.11111111111111,0.6111111111111112
9.666666666666666,0.6111111111111112
10.222222222222221,0.6111111111111112
10.777777777777779,0.6111111111111112
11.333333333333334,0.6805555555555556
11.88888888888889,0.6805555555555556
12.444444444444445,0.9861111111111112
13.0,0.9861111111111112
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">8.0,0.04994408370585468
8.555555555555555,0.4828713519029786
9.11111111111111,0.7238453141525445
9.666666666666666,0.7238453141525445
10.222222222222221,0.7238453141525445
10.777777777777779,0.7238453141525445
11.333333333333334,0.7855820639126873
11.88888888888889,0.7855820639126873
12.444444444444445,0.9996484255947664
13.0,0.9996484255947664
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">8.0,0.0
8.555555555555555,0.2511628517785613
9.11111111111111,0.48893693622768925
9.666666666666666,0.48893693622768925
10.222222222222221,0.48893693622768925
10.777777777777779,0.48893693622768925
11.333333333333334,0.560141563471466
11.88888888888889,0.560141563471466
12.444444444444445,0.9250286891460808
13.0,0.9250286891460808
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">8.0,0.0
8.555555555555555,0.3611111111111111
9.11111111111111,0.6111111111111112
9.666666666666666,0.6111111111111112
10.222222222222221,0.6111111111111112
10.777777777777779,0.6111111111111112
11.333333333333334,0.6805555555555556
11.88888888888889,0.6805555555555556
12.444444444444445,0.9861111111111112
13.0,0.9861111111111112
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.555556)" color="0x0000ff" encoding="csv">8.0,26.0
8.555555555555555,18.0
9.11111111111111,0.0
9.666666666666666,0.0
10.222222222222221,0.0
10.777777777777779,5.0
11.333333333333334,0.0
11.88888888888889,22.0
12.444444444444445,0.0
13.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.75,0.0
9.75,26.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.55556, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [8, 13]
Mean estimate of displayed sample: 9.75 ± 0.4132 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= T_scs] (&lt;&gt; (sum(s : id_s_t) Survivor(s).Safe) &gt;= (SURVIVORS_QTY * Surv_p_always_safe/100) and globalTime &lt;= T_scs)</formula>
			<comment>A percentage Surv_p_always_safe of all survivors is always guaranteed to reach a safe state within T_scs</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:13:02 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.996013)" color="0x0000ff" encoding="csv">5.035882331430912,0.4601679889213748
6.031895405716366,0.0
7.027908480001821,0.0
8.023921554287275,0.0
9.019934628572729,0.0
10.015947702858183,0.0
11.011960777143639,0.2928341747681476
12.007973851429092,0.0418334535383068
13.003986925714546,0.0
14.0,0.209167267691534
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,0.4601679889213747
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.996013)" color="0xa0a0ff" encoding="csv">5.035882331430912,0.5799555909254605
6.031895405716366,0.04994408370585468
7.027908480001821,0.04994408370585468
8.023921554287275,0.04994408370585468
9.019934628572729,0.04994408370585468
10.015947702858183,0.04994408370585468
11.011960777143639,0.4106671547544018
12.007973851429092,0.11697481982594136
13.003986925714546,0.04994408370585468
14.0,0.32022951112937165
					</series>
					<series title="lower limit" type="b(0.996013)" color="0x0000ff" encoding="csv">5.035882331430912,0.34024583953703325
6.031895405716366,0.0
7.027908480001821,0.0
8.023921554287275,0.0
9.019934628572729,0.0
10.015947702858183,0.0
11.011960777143639,0.19045329824006668
12.007973851429092,0.008676497316343764
13.003986925714546,0.0
14.0,0.12155120290780827
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,0.5822770864142763
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.996013)" color="0x0000ff" encoding="csv">5.035882331430912,0.4583333333333333
6.031895405716366,0.0
7.027908480001821,0.0
8.023921554287275,0.0
9.019934628572729,0.0
10.015947702858183,0.0
11.011960777143639,0.2916666666666667
12.007973851429092,0.041666666666666664
13.003986925714546,0.0
14.0,0.20833333333333334
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,0.4583333333333333
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.996013)" color="0xa0a0ff" encoding="csv">5.035882331430912,0.5799555909254605
6.031895405716366,0.04994408370585468
7.027908480001821,0.04994408370585468
8.023921554287275,0.04994408370585468
9.019934628572729,0.04994408370585468
10.015947702858183,0.04994408370585468
11.011960777143639,0.4106671547544018
12.007973851429092,0.11697481982594136
13.003986925714546,0.04994408370585468
14.0,0.32022951112937165
					</series>
					<series title="lower limit" type="b(0.996013)" color="0x0000ff" encoding="csv">5.035882331430912,0.34024583953703325
6.031895405716366,0.0
7.027908480001821,0.0
8.023921554287275,0.0
9.019934628572729,0.0
10.015947702858183,0.0
11.011960777143639,0.19045329824006668
12.007973851429092,0.008676497316343764
13.003986925714546,0.0
14.0,0.12155120290780827
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,0.5799555909254605
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">5.035882331430912,0.0
6.031895405716366,0.4583333333333333
7.027908480001821,0.4583333333333333
8.023921554287275,0.4583333333333333
9.019934628572729,0.4583333333333333
10.015947702858183,0.4583333333333333
11.011960777143639,0.4583333333333333
12.007973851429092,0.75
13.003986925714546,0.7916666666666666
14.0,0.7916666666666666
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">5.035882331430912,0.04994408370585468
6.031895405716366,0.5799555909254605
7.027908480001821,0.5799555909254605
8.023921554287275,0.5799555909254605
9.019934628572729,0.5799555909254605
10.015947702858183,0.5799555909254605
11.011960777143639,0.5799555909254605
12.007973851429092,0.844607342645625
13.003986925714546,0.8784487970921917
14.0,0.8784487970921917
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">5.035882331430912,0.0
6.031895405716366,0.34024583953703325
7.027908480001821,0.34024583953703325
8.023921554287275,0.34024583953703325
9.019934628572729,0.34024583953703325
10.015947702858183,0.34024583953703325
11.011960777143639,0.34024583953703325
12.007973851429092,0.6339719278620991
13.003986925714546,0.6797704888706283
14.0,0.6797704888706283
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">5.035882331430912,0.0
6.031895405716366,0.4583333333333333
7.027908480001821,0.4583333333333333
8.023921554287275,0.4583333333333333
9.019934628572729,0.4583333333333333
10.015947702858183,0.4583333333333333
11.011960777143639,0.4583333333333333
12.007973851429092,0.75
13.003986925714546,0.7916666666666666
14.0,0.7916666666666666
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.996013)" color="0x0000ff" encoding="csv">5.035882331430912,33.0
6.031895405716366,0.0
7.027908480001821,0.0
8.023921554287275,0.0
9.019934628572729,0.0
10.015947702858183,0.0
11.011960777143639,21.0
12.007973851429092,3.0
13.003986925714546,0.0
14.0,15.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.461425956228696,0.0
9.461425956228696,33.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99601, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.036, 14]
Mean estimate of displayed sample: 9.461 ± 0.8874 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= T_scs] (&lt;&gt; (sum(v : id_v_t) Victim(v).Safe) &gt;= (VICTIMS_QTY * Vict_p_always_safe/100) and globalTime &lt;= T_scs)</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:13:48 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,1.8333333333333333
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.7083333333333334
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.4583333333333333
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,1.8333333333333335
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.333333)" color="0xa0a0ff" encoding="csv">9.0,0.7238453141525445
9.333333333333334,0.04994408370585468
9.666666666666666,0.04994408370585468
10.0,0.04994408370585468
10.333333333333334,0.04994408370585468
10.666666666666666,0.04994408370585468
11.0,0.3509000340129239
11.333333333333332,0.04994408370585468
11.666666666666666,0.04994408370585468
12.0,0.2569401232482781
					</series>
					<series title="lower limit" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,0.48893693622768925
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.14396606364540726
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.07881196318794174
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,2.1715359424576337
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,0.6111111111111112
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.2361111111111111
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.1527777777777778
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,0.6111111111111112
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.333333)" color="0xa0a0ff" encoding="csv">9.0,0.7238453141525445
9.333333333333334,0.04994408370585468
9.666666666666666,0.04994408370585468
10.0,0.04994408370585468
10.333333333333334,0.04994408370585468
10.666666666666666,0.04994408370585468
11.0,0.3509000340129239
11.333333333333332,0.04994408370585468
11.666666666666666,0.04994408370585468
12.0,0.2569401232482781
					</series>
					<series title="lower limit" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,0.48893693622768925
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.14396606364540726
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.07881196318794174
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,0.7238453141525445
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">9.0,0.0
9.333333333333334,0.6111111111111112
9.666666666666666,0.6111111111111112
10.0,0.6111111111111112
10.333333333333334,0.6111111111111112
10.666666666666666,0.6111111111111112
11.0,0.6111111111111112
11.333333333333332,0.8472222222222222
11.666666666666666,0.8472222222222222
12.0,0.8472222222222222
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">9.0,0.04994408370585468
9.333333333333334,0.7238453141525445
9.666666666666666,0.7238453141525445
10.0,0.7238453141525445
10.333333333333334,0.7238453141525445
10.666666666666666,0.7238453141525445
11.0,0.7238453141525445
11.333333333333332,0.9211880368120583
11.666666666666666,0.9211880368120583
12.0,0.9211880368120583
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">9.0,0.0
9.333333333333334,0.48893693622768925
9.666666666666666,0.48893693622768925
10.0,0.48893693622768925
10.333333333333334,0.48893693622768925
10.666666666666666,0.48893693622768925
11.0,0.48893693622768925
11.333333333333332,0.7430598767517219
11.666666666666666,0.7430598767517219
12.0,0.7430598767517219
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">9.0,0.0
9.333333333333334,0.6111111111111112
9.666666666666666,0.6111111111111112
10.0,0.6111111111111112
10.333333333333334,0.6111111111111112
10.666666666666666,0.6111111111111112
11.0,0.6111111111111112
11.333333333333332,0.8472222222222222
11.666666666666666,0.8472222222222222
12.0,0.8472222222222222
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,44.0
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,17.0
11.333333333333332,0.0
11.666666666666666,0.0
12.0,11.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.930555555555555,0.0
9.930555555555555,44.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9306 ± 0.28529 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= T_scs] (&lt;&gt; ((sum(s : id_s_t) Survivor(s).Safe) + (sum(v : id_v_t) Victim(v).Safe)) &gt;= ((SURVIVORS_QTY + VICTIMS_QTY) * Civilians_p_sometimes_safe/100) and globalTime &lt;= T_scs)</formula>
			<comment>It possible, for a percentage N_perc_sometimes_safe of all civilians, to reach a safe state within T_scs</comment>
			<result outcome="success" type="quantity" value="0.969349 ± 0.0303669 (95% CI)" timestamp="2024-07-21 14:14:13 +0200">
				<details>0.969349 ± 0.0303669 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.500000)" color="0x0000ff" encoding="csv">9.0,0.651685393258427
9.5,0.0
10.0,0.0
10.5,0.0
11.0,0.24719101123595505
11.5,0.0
12.0,0.4943820224719101
12.5,0.0
13.0,0.0
13.5,0.0
14.0,0.5842696629213483
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,0.651685393258427
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.500000)" color="0xa0a0ff" encoding="csv">9.0,0.4334183822367994
9.5,0.04060085754963184
10.0,0.04060085754963184
10.5,0.04060085754963184
11.0,0.21039403871281911
11.5,0.04060085754963184
12.0,0.3499924042963012
12.5,0.04060085754963184
13.0,0.04060085754963184
13.5,0.04060085754963184
14.0,0.3980689630674446
					</series>
					<series title="lower limit" type="b(0.500000)" color="0x0000ff" encoding="csv">9.0,0.23023013620552904
9.5,0.0
10.0,0.0
10.5,0.0
11.0,0.06334345595793729
11.5,0.0
12.0,0.16185219923978425
12.5,0.0
13.0,0.0
13.5,0.0
14.0,0.20050757253435128
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,0.8668367644735988
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.500000)" color="0x0000ff" encoding="csv">9.0,0.3258426966292135
9.5,0.0
10.0,0.0
10.5,0.0
11.0,0.12359550561797752
11.5,0.0
12.0,0.24719101123595505
12.5,0.0
13.0,0.0
13.5,0.0
14.0,0.29213483146067415
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,0.3258426966292135
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.500000)" color="0xa0a0ff" encoding="csv">9.0,0.4334183822367994
9.5,0.04060085754963184
10.0,0.04060085754963184
10.5,0.04060085754963184
11.0,0.21039403871281911
11.5,0.04060085754963184
12.0,0.3499924042963012
12.5,0.04060085754963184
13.0,0.04060085754963184
13.5,0.04060085754963184
14.0,0.3980689630674446
					</series>
					<series title="lower limit" type="b(0.500000)" color="0x0000ff" encoding="csv">9.0,0.23023013620552904
9.5,0.0
10.0,0.0
10.5,0.0
11.0,0.06334345595793729
11.5,0.0
12.0,0.16185219923978425
12.5,0.0
13.0,0.0
13.5,0.0
14.0,0.20050757253435128
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,0.4334183822367994
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">9.0,0.0
9.5,0.3258426966292135
10.0,0.3258426966292135
10.5,0.3258426966292135
11.0,0.3258426966292135
11.5,0.449438202247191
12.0,0.449438202247191
12.5,0.6966292134831461
13.0,0.6966292134831461
13.5,0.6966292134831461
14.0,0.6966292134831461
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,0.9887640449438202
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">9.0,0.04060085754963184
9.5,0.4334183822367994
10.0,0.4334183822367994
10.5,0.4334183822367994
11.0,0.4334183822367994
11.5,0.5585665973748805
12.0,0.5585665973748805
12.5,0.7896505586487433
13.0,0.7896505586487433
13.5,0.7896505586487433
14.0,0.7896505586487433
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">9.0,0.0
9.5,0.23023013620552904
10.0,0.23023013620552904
10.5,0.23023013620552904
11.0,0.23023013620552904
11.5,0.34376992753857166
12.0,0.34376992753857166
12.5,0.5900840570954617
13.0,0.5900840570954617
13.5,0.5900840570954617
14.0,0.5900840570954617
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">9.0,0.0
9.5,0.3258426966292135
10.0,0.3258426966292135
10.5,0.3258426966292135
11.0,0.3258426966292135
11.5,0.449438202247191
12.0,0.449438202247191
12.5,0.6966292134831461
13.0,0.6966292134831461
13.5,0.6966292134831461
14.0,0.6966292134831461
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,0.9887640449438202
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.500000)" color="0x0000ff" encoding="csv">9.0,29.0
9.5,0.0
10.0,0.0
10.5,0.0
11.0,11.0
11.5,0.0
12.0,22.0
12.5,0.0
13.0,0.0
13.5,0.0
14.0,26.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">11.477272727272727,0.0
11.477272727272727,29.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.5, bucket count=11
Runs: 89 in total, 88 (98.876%) displayed, 1 (1.1236%) remaining
Span of displayed sample: [9, 14]
Mean estimate of displayed sample: 11.48 ± 0.4262 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= T_scs] (&lt;&gt; (sum(s : id_s_t) Survivor(s).Safe) &gt;= (SURVIVORS_QTY * Surv_p_sometimes_safe/100) and globalTime &lt;= T_scs)</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:13:02 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.999330)" color="0x0000ff" encoding="csv">5.006031533470377,0.40304788853665263
6.00536136308478,0.0
7.004691192699182,0.0
8.004021022313585,0.0
9.003350851927987,0.0
10.00268068154239,0.0
11.002010511156794,0.27796406105976046
12.001340340771195,0.041694609158964065
13.000670170385597,0.0
14.0,0.27796406105976046
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,0.40304788853665263
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.999330)" color="0xa0a0ff" encoding="csv">5.006031533470377,0.5250201154473424
6.00536136308478,0.04994408370585468
7.004691192699182,0.04994408370585468
8.004021022313585,0.04994408370585468
9.003350851927987,0.04994408370585468
10.00268068154239,0.04994408370585468
11.002010511156794,0.39590581823203597
12.001340340771195,0.11697481982594136
13.000670170385597,0.04994408370585468
14.0,0.39590581823203597
					</series>
					<series title="lower limit" type="b(0.999330)" color="0x0000ff" encoding="csv">5.006031533470377,0.2887920137607988
6.00536136308478,0.0
7.004691192699182,0.0
8.004021022313585,0.0
9.003350851927987,0.0
10.00268068154239,0.0
11.002010511156794,0.17864288115227986
12.001340340771195,0.008676497316343764
13.000670170385597,0.0
14.0,0.17864288115227986
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,0.5253722043401072
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.999330)" color="0x0000ff" encoding="csv">5.006031533470377,0.4027777777777778
6.00536136308478,0.0
7.004691192699182,0.0
8.004021022313585,0.0
9.003350851927987,0.0
10.00268068154239,0.0
11.002010511156794,0.2777777777777778
12.001340340771195,0.041666666666666664
13.000670170385597,0.0
14.0,0.2777777777777778
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,0.4027777777777778
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.999330)" color="0xa0a0ff" encoding="csv">5.006031533470377,0.5250201154473424
6.00536136308478,0.04994408370585468
7.004691192699182,0.04994408370585468
8.004021022313585,0.04994408370585468
9.003350851927987,0.04994408370585468
10.00268068154239,0.04994408370585468
11.002010511156794,0.39590581823203597
12.001340340771195,0.11697481982594136
13.000670170385597,0.04994408370585468
14.0,0.39590581823203597
					</series>
					<series title="lower limit" type="b(0.999330)" color="0x0000ff" encoding="csv">5.006031533470377,0.2887920137607988
6.00536136308478,0.0
7.004691192699182,0.0
8.004021022313585,0.0
9.003350851927987,0.0
10.00268068154239,0.0
11.002010511156794,0.17864288115227986
12.001340340771195,0.008676497316343764
13.000670170385597,0.0
14.0,0.17864288115227986
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,0.5250201154473424
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">5.006031533470377,0.0
6.00536136308478,0.4027777777777778
7.004691192699182,0.4027777777777778
8.004021022313585,0.4027777777777778
9.003350851927987,0.4027777777777778
10.00268068154239,0.4027777777777778
11.002010511156794,0.4027777777777778
12.001340340771195,0.6805555555555556
13.000670170385597,0.7222222222222222
14.0,0.7222222222222222
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">5.006031533470377,0.04994408370585468
6.00536136308478,0.5250201154473424
7.004691192699182,0.5250201154473424
8.004021022313585,0.5250201154473424
9.003350851927987,0.5250201154473424
10.00268068154239,0.5250201154473424
11.002010511156794,0.5250201154473424
12.001340340771195,0.7855820639126873
13.000670170385597,0.8213571188477201
14.0,0.8213571188477201
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">5.006031533470377,0.0
6.00536136308478,0.2887920137607988
7.004691192699182,0.2887920137607988
8.004021022313585,0.2887920137607988
9.003350851927987,0.2887920137607988
10.00268068154239,0.2887920137607988
11.002010511156794,0.2887920137607988
12.001340340771195,0.560141563471466
13.000670170385597,0.604094181767964
14.0,0.604094181767964
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">5.006031533470377,0.0
6.00536136308478,0.4027777777777778
7.004691192699182,0.4027777777777778
8.004021022313585,0.4027777777777778
9.003350851927987,0.4027777777777778
10.00268068154239,0.4027777777777778
11.002010511156794,0.4027777777777778
12.001340340771195,0.6805555555555556
13.000670170385597,0.7222222222222222
14.0,0.7222222222222222
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.999330)" color="0x0000ff" encoding="csv">5.006031533470377,29.0
6.00536136308478,0.0
7.004691192699182,0.0
8.004021022313585,0.0
9.003350851927987,0.0
10.00268068154239,0.0
11.002010511156794,20.0
12.001340340771195,3.0
13.000670170385597,0.0
14.0,20.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.948066876544747,0.0
9.948066876544747,29.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.99933, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.006, 14]
Mean estimate of displayed sample: 9.948 ± 0.8979 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= T_scs] (&lt;&gt; (sum(v : id_v_t) Victim(v).Safe) &gt;= (VICTIMS_QTY * Vict_p_sometimes_safe/100) and globalTime &lt;= T_scs)</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:13:02 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,1.875
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.5
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.625
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,1.875
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.333333)" color="0xa0a0ff" encoding="csv">9.0,0.7363890523983516
9.333333333333334,0.04994408370585468
9.666666666666666,0.04994408370585468
10.0,0.04994408370585468
10.333333333333334,0.04994408370585468
10.666666666666666,0.04994408370585468
11.0,0.27303927891193064
11.333333333333332,0.04994408370585468
11.666666666666666,0.04994408370585468
12.0,0.32022951112937165
					</series>
					<series title="lower limit" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,0.5029859293712835
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.08919640600812592
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.12155120290780827
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,2.209167157195055
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,0.625
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.16666666666666666
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.20833333333333334
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,0.625
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.333333)" color="0xa0a0ff" encoding="csv">9.0,0.7363890523983516
9.333333333333334,0.04994408370585468
9.666666666666666,0.04994408370585468
10.0,0.04994408370585468
10.333333333333334,0.04994408370585468
10.666666666666666,0.04994408370585468
11.0,0.27303927891193064
11.333333333333332,0.04994408370585468
11.666666666666666,0.04994408370585468
12.0,0.32022951112937165
					</series>
					<series title="lower limit" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,0.5029859293712835
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,0.08919640600812592
11.333333333333332,0.0
11.666666666666666,0.0
12.0,0.12155120290780827
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,0.7363890523983516
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">9.0,0.0
9.333333333333334,0.625
9.666666666666666,0.625
10.0,0.625
10.333333333333334,0.625
10.666666666666666,0.625
11.0,0.625
11.333333333333332,0.7916666666666666
11.666666666666666,0.7916666666666666
12.0,0.7916666666666666
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">9.0,0.04994408370585468
9.333333333333334,0.7363890523983516
9.666666666666666,0.7363890523983516
10.0,0.7363890523983516
10.333333333333334,0.7363890523983516
10.666666666666666,0.7363890523983516
11.0,0.7363890523983516
11.333333333333332,0.8784487970921917
11.666666666666666,0.8784487970921917
12.0,0.8784487970921917
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">9.0,0.0
9.333333333333334,0.5029859293712835
9.666666666666666,0.5029859293712835
10.0,0.5029859293712835
10.333333333333334,0.5029859293712835
10.666666666666666,0.5029859293712835
11.0,0.5029859293712835
11.333333333333332,0.6797704888706283
11.666666666666666,0.6797704888706283
12.0,0.6797704888706283
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">9.0,0.0
9.333333333333334,0.625
9.666666666666666,0.625
10.0,0.625
10.333333333333334,0.625
10.666666666666666,0.625
11.0,0.625
11.333333333333332,0.7916666666666666
11.666666666666666,0.7916666666666666
12.0,0.7916666666666666
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.333333)" color="0x0000ff" encoding="csv">9.0,45.0
9.333333333333334,0.0
9.666666666666666,0.0
10.0,0.0
10.333333333333334,0.0
10.666666666666666,0.0
11.0,12.0
11.333333333333332,0.0
11.666666666666666,0.0
12.0,15.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9.958333333333334,0.0
9.958333333333334,45.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.33333, bucket count=10
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [9, 12]
Mean estimate of displayed sample: 9.9583 ± 0.30149 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= 1000] ([] 	forall(i : id_s_t) not Survivor(i).Safe imply map[survivors[i].x][survivors[i].y] != FIRE and
			forall(i : id_v_t) not Victim(i).Safe imply map[victims[i].x][victims[i].y] != FIRE and
			forall(i : id_f_t) map[responders[i].x][responders[i].y] != FIRE
)</formula>
			<comment>Any entity is never in the fire</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:08:50 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= 1000] ([]	 	forall(s1 : id_s_t) forall(s2 : id_s_t) ( s1!=s2 and (not Survivor(s1).Safe) and (not Survivor(s2).Safe) ) imply survivors[s1] != survivors[s2] and
			forall(r1 : id_f_t) forall(r2 : id_f_t) ( r1!=r2 ) imply responders[r1] != responders[r2] and
			forall(s : id_s_t) forall(r : id_f_t) ( not Survivor(s).Safe and not Survivor(s).Reaching_victim ) imply survivors[s] != responders[r]
)
</formula>
			<comment>Any entity is never in an occupied cell</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:08:56 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= 1000] ([] 	(forall(i : id_s_t) !Survivor(i).Safe imply (survivors[i].x &lt; N and survivors[i].y &lt; M) and
			((survivors[i].x &lt; N and survivors[i].y &lt; M) imply !Survivor(i).Safe)) and
			(forall(j : id_v_t) !Victim(j).Safe imply (victims[j].x &lt; N and victims[j].y &lt; M) and
			((victims[j].x &lt; N and victims[j].y &lt; M) imply !Victim(j).Safe))
)</formula>
			<comment>Survivors and victims that are not out of the map have a valid position</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:09:03 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= 1000] ([] 	(globalTime &lt;= T_scs imply forall(id : id_d_t)
			bounds[id].min_x &gt;= 0 and bounds[id].max_x &lt; N and
			bounds[id].min_y &gt;= 0 and bounds[id].max_y &lt; M and
			drones[id].x &gt;= bounds[id].min_x and drones[id].x &lt;= bounds[id].max_x and 
			drones[id].y &gt;= bounds[id].min_y and drones[id].y &lt;= bounds[id].max_y)
)</formula>
			<comment>Bounds of the drones are valid and a drone never goes out of its bounds</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:09:10 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;= 1000] ([] forall(i : id_s_t) Survivor(i).Moving imply not tileIsNearSomething(survivors[i], FIRE))</formula>
			<comment>A survivor never moves near the fire</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2024-07-21 14:09:17 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
	</queries>
</nta>
